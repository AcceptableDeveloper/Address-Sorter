{"ast":null,"code":"import { addresses, ErrorMessages, exampleAddress, emptyAddress } from '../tests/mock-data/mock-data';\nimport * as i0 from \"@angular/core\";\nexport class DataService {\n  constructor() {\n    this.addresses = addresses;\n    this.errorMessages = ErrorMessages;\n    this.addressArray = [];\n    this.validAddresses = [];\n    this.validAddress = emptyAddress;\n    this.exampleAddress = exampleAddress;\n  }\n  /**\n   * Calls the various methods responsible for handling various validation checks and handles error catching\n   * @returns valid addresses to the container component\n   */\n  validateAddress() {\n    let addressData;\n    this.addresses.forEach(address => {\n      try {\n        addressData = this.stringToArray(address);\n        if (Array.isArray(addressData)) {\n          this.validAddresses.push(this.validationDirectory(addressData));\n        }\n      } catch (error) {\n        console.error(error + address);\n        this.addresses.splice(this.addresses.indexOf(address), 1);\n      }\n    });\n    return this.validAddresses;\n  }\n  /**\n   * processes each address string into an array of lines and also performs first validation check that an address is at least 3 lines\n   * @param address from ValidateAddress()\n   * @returns an address or boolean\n   */\n  stringToArray(address) {\n    this.addressArray = address.split(',');\n    for (let i = 0; i < this.addressArray.length; i++) {\n      this.addressArray[i] = this.addressArray[i].trim();\n    }\n    return this.checkNumOfLines(this.addressArray);\n  }\n  checkNumOfLines(address) {\n    return address.length >= 3 ? address : false;\n  }\n  /**\n   * directs the input address to the correct validation method depending on number of lines\n   * @param address from ValidateAddress()\n   * @returns valid address\n   */\n  validationDirectory(address) {\n    this.resetValidAddress();\n    switch (address.length) {\n      case 3:\n        return this.validateThreeLineAddress(address);\n      case 4:\n        return this.validateFourLineAddress(address);\n      case 5:\n        return this.validateFiveLineAddress(address);\n      default:\n        return this.exampleAddress;\n    }\n  }\n  /**\n   * Reset the valid address so new address can be validated\n   */\n  resetValidAddress() {\n    this.validAddress = {\n      streetNum: 0,\n      streetName: '',\n      fullStreetName: '',\n      buildingName: '',\n      postCode: '',\n      town: '',\n      county: '',\n      apartmentNum: 0,\n      apartmentName: '',\n      fullApartmentName: ''\n    };\n  }\n  /**\n   * Validates 3 line addresses\n   * @param address from validationDirectory()\n   * @returns valid address\n   */\n  validateThreeLineAddress(address) {\n    this.validAddress.fullStreetName = this.checkIfStreetAddress(address[0]);\n    this.validAddress.town = address[1];\n    this.validAddress.postCode = this.isValidPostCode(address[2]) ? address[2] : '';\n    return this.validAddress;\n  }\n  /**\n   * Validations 4 lines addresses\n   * @param address from validationDirectory()\n   * @returns valid addresses\n   */\n  validateFourLineAddress(address) {\n    this.validAddress.postCode = this.isValidPostCode(address[3]) ? address[3] : '';\n    if (address[1].includes('Co') || address[1].includes('County')) {\n      this.setError(this.errorMessages.postcode);\n    } else {\n      if (!parseInt(address[0], 10)) {\n        this.validAddress.buildingName = address[0];\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[1]);\n        this.validAddress.town = address[2];\n      } else if (parseInt(address[0], 10) && parseInt(address[1], 10)) {\n        this.validAddress.fullApartmentName = address[0];\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[1]);\n        this.validAddress.town = address[2];\n      } else if (address[2].includes('Co.') || address[2].includes('County')) {\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[0]);\n        this.validAddress.town = address[1];\n        this.validAddress.county = address[2];\n      } else {\n        this.setError(this.errorMessages.minimumAddress);\n      }\n    }\n    return this.validAddress;\n  }\n  /**\n   * Validations 5 line addresses\n   * @param address from validationDirectory()\n   * @returns valid addresses\n   */\n  validateFiveLineAddress(address) {\n    this.validAddress.postCode = this.isValidPostCode(address[4]) ? address[4] : '';\n    if (address[2].includes('Co') || address[2].includes('County')) {\n      this.setError(this.errorMessages.order);\n    } else {\n      if (!parseInt(address[0], 10)) {\n        this.validAddress.buildingName = address[0];\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[1]);\n        this.validAddress.town = address[2];\n        this.validAddress.county = address[3];\n      } else if (parseInt(address[0], 10) && parseInt(address[1], 10)) {\n        this.validAddress.fullApartmentName = address[0];\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[1]);\n        this.validAddress.town = address[2];\n        this.validAddress.county = address[3];\n      } else {\n        this.setError(this.errorMessages.minimumAddress);\n      }\n    }\n    return this.validAddress;\n  }\n  /**\n   * Validates postcode against the UK postcode regex, returns valid postcode, otherwise throws error\n   * @param postcode from address validation methods\n   * @returns valid postcode\n   */\n  isValidPostCode(postcode) {\n    const postcodeRegEx = /[A-Z]{1,2}[0-9]{1,2} ?[0-9][A-Z]{2}/i;\n    const hasBT = postcode.indexOf('BT') === 0;\n    if (postcodeRegEx.test(postcode) && hasBT) {\n      return postcode;\n    } else {\n      this.setError(this.errorMessages.postcode);\n    }\n  }\n  /**\n   * Validates that street number and name are in the correct format, then returns it, otherwise throw error\n   * @param address from address validation methods\n   * @returns valid street address\n   */\n  checkIfStreetAddress(street) {\n    if (!isNaN(parseInt(street, 10))) {\n      return street;\n    } else {\n      this.setError(this.errorMessages.street);\n    }\n  }\n  /**\n   * Sets and throws the error messages\n   * @param error from address validation method\n   */\n  setError(error) {\n    throw new Error(`❌ Error: ${error.message}, 👍 Example:${error.example}, Address Used: `);\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac\n  });\n}","map":{"version":3,"names":["addresses","ErrorMessages","exampleAddress","emptyAddress","DataService","constructor","errorMessages","addressArray","validAddresses","validAddress","validateAddress","addressData","forEach","address","stringToArray","Array","isArray","push","validationDirectory","error","console","splice","indexOf","split","i","length","trim","checkNumOfLines","resetValidAddress","validateThreeLineAddress","validateFourLineAddress","validateFiveLineAddress","streetNum","streetName","fullStreetName","buildingName","postCode","town","county","apartmentNum","apartmentName","fullApartmentName","checkIfStreetAddress","isValidPostCode","includes","setError","postcode","parseInt","minimumAddress","order","postcodeRegEx","hasBT","test","street","isNaN","Error","message","example","_","_2","factory","ɵfac"],"sources":["/Users/justinassinkunas/Documents/Development/Angular/Address Sorter/Address-Sorter-Chargifi-Application/src/app/features/address-sorter/shared/services/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Address, ErrorMessage } from '../models/address-model';\nimport { addresses, ErrorMessages, exampleAddress, emptyAddress } from '../tests/mock-data/mock-data';\n\n@Injectable()\nexport class DataService {\n  addresses: string[] = addresses;\n  errorMessages: ErrorMessage = ErrorMessages;\n  addressArray: string[] = [];\n  validAddresses: Address[] = [];\n  validAddress: Address = emptyAddress;\n  exampleAddress: Address = exampleAddress;\n\n  constructor() {}\n\n  /**\n   * Calls the various methods responsible for handling various validation checks and handles error catching\n   * @returns valid addresses to the container component\n   */\n  validateAddress(): Address[] {\n    let addressData: string[] | boolean;\n\n    this.addresses.forEach((address) => {\n      try {\n        addressData = this.stringToArray(address);\n        if (Array.isArray(addressData)) {\n          this.validAddresses.push(this.validationDirectory(addressData));\n        }\n      } catch (error) {\n        console.error(error + address);\n        this.addresses.splice(this.addresses.indexOf(address), 1);\n      }\n    });\n    return this.validAddresses;\n  }\n\n  /**\n   * processes each address string into an array of lines and also performs first validation check that an address is at least 3 lines\n   * @param address from ValidateAddress()\n   * @returns an address or boolean\n   */\n\n  stringToArray(address: string): string[] | boolean {\n    this.addressArray = address.split(',');\n    for (let i = 0; i < this.addressArray.length; i++) {\n      this.addressArray[i] = this.addressArray[i].trim();\n    }\n    return this.checkNumOfLines(this.addressArray);\n  }\n\n  checkNumOfLines(address: string[]): string[] | boolean {\n    return address.length >= 3 ? address : false;\n  }\n\n  /**\n   * directs the input address to the correct validation method depending on number of lines\n   * @param address from ValidateAddress()\n   * @returns valid address\n   */\n\n  validationDirectory(address: string[]): Address {\n    this.resetValidAddress();\n    switch (address.length) {\n      case 3:\n        return this.validateThreeLineAddress(address);\n      case 4:\n        return this.validateFourLineAddress(address);\n      case 5:\n        return this.validateFiveLineAddress(address);\n      default:\n        return this.exampleAddress;\n    }\n  }\n\n  /**\n   * Reset the valid address so new address can be validated\n   */\n  resetValidAddress(): void {\n    this.validAddress = {\n      streetNum: 0,\n      streetName: '',\n      fullStreetName: '',\n      buildingName: '',\n      postCode: '',\n      town: '',\n      county: '',\n      apartmentNum: 0,\n      apartmentName: '',\n      fullApartmentName: '',\n    };\n  }\n\n  /**\n   * Validates 3 line addresses\n   * @param address from validationDirectory()\n   * @returns valid address\n   */\n  validateThreeLineAddress(address: string[]): Address {\n    this.validAddress.fullStreetName = this.checkIfStreetAddress(address[0]);\n    this.validAddress.town = address[1];\n    this.validAddress.postCode = this.isValidPostCode(address[2]) ? address[2] : '';\n    return this.validAddress;\n  }\n\n  /**\n   * Validations 4 lines addresses\n   * @param address from validationDirectory()\n   * @returns valid addresses\n   */\n  validateFourLineAddress(address: string[]): Address {\n    this.validAddress.postCode = this.isValidPostCode(address[3]) ? address[3] : '';\n    if (address[1].includes('Co') || address[1].includes('County')) {\n      this.setError(this.errorMessages.postcode);\n    } else {\n      if (!parseInt(address[0], 10)) {\n        this.validAddress.buildingName = address[0];\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[1]);\n        this.validAddress.town = address[2];\n      } else if (parseInt(address[0], 10) && parseInt(address[1], 10)) {\n        this.validAddress.fullApartmentName = address[0];\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[1]);\n        this.validAddress.town = address[2];\n      } else if (address[2].includes('Co.') || address[2].includes('County')) {\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[0]);\n        this.validAddress.town = address[1];\n        this.validAddress.county = address[2];\n      } else {\n        this.setError(this.errorMessages.minimumAddress);\n      }\n    }\n    return this.validAddress;\n  }\n\n  /**\n   * Validations 5 line addresses\n   * @param address from validationDirectory()\n   * @returns valid addresses\n   */\n  validateFiveLineAddress(address: string[]): Address {\n    this.validAddress.postCode = this.isValidPostCode(address[4]) ? address[4] : '';\n    if (address[2].includes('Co') || address[2].includes('County')) {\n      this.setError(this.errorMessages.order);\n    } else {\n      if (!parseInt(address[0], 10)) {\n        this.validAddress.buildingName = address[0];\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[1]);\n        this.validAddress.town = address[2];\n        this.validAddress.county = address[3];\n      } else if (parseInt(address[0], 10) && parseInt(address[1], 10)) {\n        this.validAddress.fullApartmentName = address[0];\n        this.validAddress.fullStreetName = this.checkIfStreetAddress(address[1]);\n        this.validAddress.town = address[2];\n        this.validAddress.county = address[3];\n      } else {\n        this.setError(this.errorMessages.minimumAddress);\n      }\n    }\n    return this.validAddress;\n  }\n\n  /**\n   * Validates postcode against the UK postcode regex, returns valid postcode, otherwise throws error\n   * @param postcode from address validation methods\n   * @returns valid postcode\n   */\n  isValidPostCode(postcode: string): any {\n    const postcodeRegEx = /[A-Z]{1,2}[0-9]{1,2} ?[0-9][A-Z]{2}/i;\n    const hasBT = postcode.indexOf('BT') === 0;\n    if (postcodeRegEx.test(postcode) && hasBT) {\n      return postcode;\n    } else {\n      this.setError(this.errorMessages.postcode);\n    }\n  }\n\n  /**\n   * Validates that street number and name are in the correct format, then returns it, otherwise throw error\n   * @param address from address validation methods\n   * @returns valid street address\n   */\n  checkIfStreetAddress(street: string): any {\n    if (!isNaN(parseInt(street, 10))) {\n      return street;\n    } else {\n      this.setError(this.errorMessages.street);\n    }\n  }\n\n  /**\n   * Sets and throws the error messages\n   * @param error from address validation method\n   */\n  setError(error: any): void {\n    throw new Error(`❌ Error: ${error.message}, 👍 Example:${error.example}, Address Used: `);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}