{"ast":null,"code":"export const addresses = ['10 Delta Ave, Belfast, Co. Antrim, BT2 8HS', '9 Delta Ave, Belfast, Co. Antrim, BT2 8HS', 'Tech Baths, 17 Lima Ave, Holywood, BT2 8HS', 'Tech Baths, 17 Mima Ave, Holywood, BT2 8HS', 'Star Baths, 17 Lima Ave, Holywood, BT2 8HS', '20 Delta Ave, Belfast, Co. Antrim, BT2 8HS', '20 Defying Ave, Belfast, Co. Antrim, BT2 8HS', 'Ormeau Baths, 18 Lima Ave, Belfast, BT2 8HS', 'Tech Baths, 18 Lima Ave, Holywood, BT2 8HS', 'Tech Baths, 19 Lima Ave, Holywood, BT2 8HS', 'Lakeside Baths, 18 Lima Ave, Belfast, BT2 8HS', '18 Alpha Ave, Belfast, BT2 8HS', 'Volcano Baths, 18 Death Star Ave, Belfast, Co. Antrim, BT2 8HS', 'Volcano Baths, 1 Death Star Ave, Belfast, Co. Antrim, BT2 8HS', '4 The Front, 37 Shore Road, Holywood, BT18 9GZ', '12 The Front, 36 Shore Road, Holywood, BT18 9GZ', '2.4 The Front, 39 Shore Road, Holywood, BT18 9GZ', '18 Ormeau Ave, Belfast Co. Antrim BT2 8HS', '18 Ormeau Ave, Belfast, Co. Antrim BT2 8HS', 'Downing Street, London, SW1A 2AA', 'Ormeau Baths, 18 task Ave, Belfast, Co. Antrim', 'California Baths, Belfast, BT2 8HS' // Invalid 5\n];\nexport const ErrorMessages = {\n  minimumAddress: {\n    message: 'An address should have a minimum of 3 lines and a maximum of 5 lines, seperated by commas, see example:',\n    example: 'Building Name/Apartment(optional), House number/street, Town, County(optional), Postcode'\n  },\n  postcode: {\n    message: 'Postcode is not in the correct format, postcode should look like one of the following:',\n    example: 'BT12 3AB or BT1 3AB'\n  },\n  street: {\n    message: 'Invalid street number and name, street address contain number and street name on the same line, see example:',\n    example: '12 Park Avenue'\n  },\n  order: {\n    message: 'Town and county are not in the correct order, please see the example',\n    example: 'Belfast, Co.Antrim or Belfast, County Antrim'\n  }\n};\nexport const exampleAddress = {\n  streetNum: 1,\n  streetName: 'Buck Road',\n  fullStreetName: '12 Buck Road',\n  buildingName: 'The Reach',\n  postCode: 'BT2 8HS',\n  town: 'Belfast',\n  county: 'County Antrim',\n  apartmentNum: 1,\n  apartmentName: '',\n  fullApartmentName: ''\n};\nexport const emptyAddress = {\n  streetNum: 0,\n  streetName: '',\n  fullStreetName: '',\n  buildingName: '',\n  postCode: '',\n  town: '',\n  county: '',\n  apartmentNum: 0,\n  apartmentName: '',\n  fullApartmentName: ''\n};","map":{"version":3,"names":["addresses","ErrorMessages","minimumAddress","message","example","postcode","street","order","exampleAddress","streetNum","streetName","fullStreetName","buildingName","postCode","town","county","apartmentNum","apartmentName","fullApartmentName","emptyAddress"],"sources":["/Users/justinassinkunas/Documents/Development/Angular/Address Sorter/Address-Sorter-Chargifi-Application/src/app/features/address-sorter/shared/tests/mock-data/mock-data.ts"],"sourcesContent":["import { Address, ErrorMessage } from '../../models/address-model';\n\nexport const addresses: string[] = [\n  '10 Delta Ave, Belfast, Co. Antrim, BT2 8HS', // valid 1\n  '9 Delta Ave, Belfast, Co. Antrim, BT2 8HS', // valid 2\n  'Tech Baths, 17 Lima Ave, Holywood, BT2 8HS', // valid 3\n  'Tech Baths, 17 Mima Ave, Holywood, BT2 8HS', // valid 4\n  'Star Baths, 17 Lima Ave, Holywood, BT2 8HS', // valid 5\n  '20 Delta Ave, Belfast, Co. Antrim, BT2 8HS', // valid 6\n  '20 Defying Ave, Belfast, Co. Antrim, BT2 8HS', // valid 7\n  'Ormeau Baths, 18 Lima Ave, Belfast, BT2 8HS', // valid 8\n  'Tech Baths, 18 Lima Ave, Holywood, BT2 8HS', // valid 9\n  'Tech Baths, 19 Lima Ave, Holywood, BT2 8HS', // valid 10\n  'Lakeside Baths, 18 Lima Ave, Belfast, BT2 8HS', // valid 11\n  '18 Alpha Ave, Belfast, BT2 8HS', // valid 12\n  'Volcano Baths, 18 Death Star Ave, Belfast, Co. Antrim, BT2 8HS', // valid 13\n  'Volcano Baths, 1 Death Star Ave, Belfast, Co. Antrim, BT2 8HS', // valid 14\n  '4 The Front, 37 Shore Road, Holywood, BT18 9GZ', // valid 15\n  '12 The Front, 36 Shore Road, Holywood, BT18 9GZ', // valid 16\n  '2.4 The Front, 39 Shore Road, Holywood, BT18 9GZ', // valid 17\n  '18 Ormeau Ave, Belfast Co. Antrim BT2 8HS', // Invalid 1\n  '18 Ormeau Ave, Belfast, Co. Antrim BT2 8HS', // Invalid 2\n  'Downing Street, London, SW1A 2AA', // Invalid 3\n  'Ormeau Baths, 18 task Ave, Belfast, Co. Antrim', // Invalid 4\n  'California Baths, Belfast, BT2 8HS', // Invalid 5\n];\n\nexport const ErrorMessages: ErrorMessage = {\n  minimumAddress: {\n    message: 'An address should have a minimum of 3 lines and a maximum of 5 lines, seperated by commas, see example:',\n    example: 'Building Name/Apartment(optional), House number/street, Town, County(optional), Postcode',\n  },\n  postcode: {\n    message: 'Postcode is not in the correct format, postcode should look like one of the following:',\n    example: 'BT12 3AB or BT1 3AB',\n  },\n  street: {\n    message: 'Invalid street number and name, street address contain number and street name on the same line, see example:',\n    example: '12 Park Avenue',\n  },\n  order: {\n    message: 'Town and county are not in the correct order, please see the example',\n    example: 'Belfast, Co.Antrim or Belfast, County Antrim',\n  },\n};\n\nexport const exampleAddress: Address = {\n  streetNum: 1,\n  streetName: 'Buck Road',\n  fullStreetName: '12 Buck Road',\n  buildingName: 'The Reach',\n  postCode: 'BT2 8HS',\n  town: 'Belfast',\n  county: 'County Antrim',\n  apartmentNum: 1,\n  apartmentName: '',\n  fullApartmentName: '',\n};\n\nexport const emptyAddress: Address = {\n  streetNum: 0,\n  streetName: '',\n  fullStreetName: '',\n  buildingName: '',\n  postCode: '',\n  town: '',\n  county: '',\n  apartmentNum: 0,\n  apartmentName: '',\n  fullApartmentName: '',\n};\n"],"mappings":"AAEA,OAAO,MAAMA,SAAS,GAAa,CACjC,4CAA4C,EAC5C,2CAA2C,EAC3C,4CAA4C,EAC5C,4CAA4C,EAC5C,4CAA4C,EAC5C,4CAA4C,EAC5C,8CAA8C,EAC9C,6CAA6C,EAC7C,4CAA4C,EAC5C,4CAA4C,EAC5C,+CAA+C,EAC/C,gCAAgC,EAChC,gEAAgE,EAChE,+DAA+D,EAC/D,gDAAgD,EAChD,iDAAiD,EACjD,kDAAkD,EAClD,2CAA2C,EAC3C,4CAA4C,EAC5C,kCAAkC,EAClC,gDAAgD,EAChD,oCAAoC,CAAE;AAAA,CACvC;AAED,OAAO,MAAMC,aAAa,GAAiB;EACzCC,cAAc,EAAE;IACdC,OAAO,EAAE,yGAAyG;IAClHC,OAAO,EAAE;GACV;EACDC,QAAQ,EAAE;IACRF,OAAO,EAAE,wFAAwF;IACjGC,OAAO,EAAE;GACV;EACDE,MAAM,EAAE;IACNH,OAAO,EAAE,8GAA8G;IACvHC,OAAO,EAAE;GACV;EACDG,KAAK,EAAE;IACLJ,OAAO,EAAE,sEAAsE;IAC/EC,OAAO,EAAE;;CAEZ;AAED,OAAO,MAAMI,cAAc,GAAY;EACrCC,SAAS,EAAE,CAAC;EACZC,UAAU,EAAE,WAAW;EACvBC,cAAc,EAAE,cAAc;EAC9BC,YAAY,EAAE,WAAW;EACzBC,QAAQ,EAAE,SAAS;EACnBC,IAAI,EAAE,SAAS;EACfC,MAAM,EAAE,eAAe;EACvBC,YAAY,EAAE,CAAC;EACfC,aAAa,EAAE,EAAE;EACjBC,iBAAiB,EAAE;CACpB;AAED,OAAO,MAAMC,YAAY,GAAY;EACnCV,SAAS,EAAE,CAAC;EACZC,UAAU,EAAE,EAAE;EACdC,cAAc,EAAE,EAAE;EAClBC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,EAAE;EACZC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE,EAAE;EACVC,YAAY,EAAE,CAAC;EACfC,aAAa,EAAE,EAAE;EACjBC,iBAAiB,EAAE;CACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}